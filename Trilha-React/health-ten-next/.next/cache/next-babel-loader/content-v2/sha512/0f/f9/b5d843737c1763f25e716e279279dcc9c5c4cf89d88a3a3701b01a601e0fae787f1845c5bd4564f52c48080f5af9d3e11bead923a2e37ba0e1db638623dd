{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projetos Rocketseat\\\\NLW-4-REACT-NODE\\\\Trilha-React\\\\health-ten-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(60);\n  const {\n    0: challengeCompleted,\n    1: setChallengeCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // calculo de level baseado no calculo de rpg\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    console.log('new challeng');\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      returrn;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      levelUp,\n      currentExperience,\n      challengeCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/Projetos Rocketseat/NLW-4-REACT-NODE/Trilha-React/health-ten-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","console","log","randomChallengeIndex","floor","random","length","challenge","resetChallenge","completedChallenge","returrn"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,MAAMC,iBAAiB,gBAAGH,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASI,kBAAT,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAAqE;AAExE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACO,iBAAD;AAAA,OAAoBC;AAApB,MAA4CR,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM;AAAA,OAACS,kBAAD;AAAA,OAAqBC;AAArB,MAA8CV,QAAQ,CAAC,CAAD,CAA5D;AAGA,QAAM;AAAA,OAACW,eAAD;AAAA,OAAiBC;AAAjB,MAAuCZ,QAAQ,CAAC,IAAD,CAArD,CAPwE,CASxE;;AACA,QAAMa,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,UAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAerB,UAAU,CAACsB,MAArC,CAA7B;AACA,UAAMC,SAAS,GAAGvB,UAAU,CAACmB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;AAEH;;AAED,WAASC,cAAT,GAAyB;AACrBb,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASc,kBAAT,GAA6B;AACzB,QAAG,CAACf,eAAJ,EAAoB;AAEhBgB,MAAAA,OAAO;AACV;AAEJ;;AAKD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAG;AACAtB,MAAAA,KADA;AAEAW,MAAAA,OAFA;AAGAT,MAAAA,iBAHA;AAIAE,MAAAA,kBAJA;AAKAQ,MAAAA,iBALA;AAMAN,MAAAA,eANA;AAOAc,MAAAA,cAPA;AAQAZ,MAAAA,qBARA;AASAa,MAAAA;AATA,KADR;AAAA,cAcKtB;AAdL;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH","sourcesContent":["import { createContext, ReactNode, useState }from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'yey';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    levelUp: () => void;\r\n    currentExperience: number;\r\n    challengeCompleted: number;\r\n    startNewChallenge: () => void; \r\n    activeChallenge: Challenge;   \r\n    resetChallenge: () => void;  \r\n    experienceToNextLevel: number; \r\n    completedChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\n\r\nexport function ChallengesProvider( { children } : ChallengesProviderProps ){\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(60);\r\n    const [challengeCompleted, setChallengeCompleted] = useState(0);\r\n    \r\n\r\n    const [activeChallenge,setActiveChallenge] = useState(null);\r\n    \r\n    // calculo de level baseado no calculo de rpg\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1 );\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        console.log('new challeng');\r\n        const randomChallengeIndex = Math.floor(Math.random()* challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n        \r\n        setActiveChallenge(challenge);\r\n        \r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completedChallenge(){\r\n        if(!activeChallenge){\r\n\r\n            returrn\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <ChallengesContext.Provider \r\n        value={ {\r\n                level,\r\n                levelUp,\r\n                currentExperience,\r\n                challengeCompleted,\r\n                startNewChallenge,   \r\n                activeChallenge,   \r\n                resetChallenge,    \r\n                experienceToNextLevel, \r\n                completedChallenge,\r\n            } }\r\n        \r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}