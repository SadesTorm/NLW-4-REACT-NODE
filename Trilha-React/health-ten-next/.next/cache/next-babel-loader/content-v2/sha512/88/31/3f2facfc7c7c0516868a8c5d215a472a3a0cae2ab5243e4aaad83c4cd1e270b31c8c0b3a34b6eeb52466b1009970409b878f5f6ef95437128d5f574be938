{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Projetos Rocketseat\\\\NLW-4-REACT-NODE\\\\Trilha-React\\\\health-ten-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  // array vazio a function e executada apaenas uma vez quando componete for exibido em tela\n  useEffect(function () {\n    Notification.requestPermission();\n  }, []);\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengeCompleted = _useState3[0],\n      setChallengeCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1]; // calculo de level baseado no calculo de rpg\n\n\n  var experienceToNextLevel = Math.pow((level + 1) * 4, 2);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    console.log('new challeng');\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio', {\n        body: \"Valendo \".concat(challenge.amount, \"xp!\")\n      });\n    }\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    var amount = activeChallenge.amount;\n    var finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      levelUp: levelUp,\n      currentExperience: currentExperience,\n      challengeCompleted: challengeCompleted,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge,\n      experienceToNextLevel: experienceToNextLevel,\n      completedChallenge: completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChallengesProvider, \"asBxDoBS8iIiKPwkriVvGMegY9k=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["D:/Projetos Rocketseat/NLW-4-REACT-NODE/Trilha-React/health-ten-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","challenges","ChallengesContext","ChallengesProvider","children","Notification","requestPermission","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","levelUp","startNewChallenge","console","log","randomChallengeIndex","floor","random","length","challenge","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAmCC,SAAnC,EAA8CC,QAA9C,QAA6D,OAA7D;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAwBA,OAAO,IAAMC,iBAAiB,gBAAGJ,aAAa,CAAC,EAAD,CAAvC;AAGP,OAAO,SAASK,kBAAT,OAAqE;AAAA;;AAAA,MAAtCC,QAAsC,QAAtCA,QAAsC;AAExE;AACAL,EAAAA,SAAS,CAAC,YAAM;AACZM,IAAAA,YAAY,CAACC,iBAAb;AACH,GAFQ,EAEN,EAFM,CAAT;;AAHwE,kBAO9CN,QAAQ,CAAC,CAAD,CAPsC;AAAA,MAOjEO,KAPiE;AAAA,MAO1DC,QAP0D;;AAAA,mBAQtBR,QAAQ,CAAC,CAAD,CARc;AAAA,MAQjES,iBARiE;AAAA,MAQ9CC,oBAR8C;;AAAA,mBASpBV,QAAQ,CAAC,CAAD,CATY;AAAA,MASjEW,kBATiE;AAAA,MAS7CC,qBAT6C;;AAAA,mBAY3BZ,QAAQ,CAAC,IAAD,CAZmB;AAAA,MAYjEa,eAZiE;AAAA,MAYjDC,kBAZiD,kBAcxE;;;AACA,MAAMC,qBAAqB,GAAGC,IAAI,CAACC,GAAL,CAAS,CAACV,KAAK,GAAG,CAAT,IAAc,CAAvB,EAA0B,CAA1B,CAA9B;;AAEA,WAASW,OAAT,GAAkB;AACdV,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH;;AAED,WAASY,iBAAT,GAA4B;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAMC,oBAAoB,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAevB,UAAU,CAACwB,MAArC,CAA7B;AACA,QAAMC,SAAS,GAAGzB,UAAU,CAACqB,oBAAD,CAA5B;AAEAR,IAAAA,kBAAkB,CAACY,SAAD,CAAlB;;AAEA,QAAGrB,YAAY,CAACsB,UAAb,KAA4B,SAA/B,EAAyC;AACrC,UAAItB,YAAJ,CAAiB,cAAjB,EAAiC;AAC7BuB,QAAAA,IAAI,oBAAYF,SAAS,CAACG,MAAtB;AADyB,OAAjC;AAGH;AAEJ;;AAED,WAASC,cAAT,GAAyB;AACrBhB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED,WAASiB,kBAAT,GAA6B;AACzB,QAAG,CAAClB,eAAJ,EAAoB;AAEhB;AACH;;AAJwB,QAMjBgB,MANiB,GAMNhB,eANM,CAMjBgB,MANiB;AAQzB,QAAIG,eAAe,GAAGvB,iBAAiB,GAAGoB,MAA1C;;AAEA,QAAGG,eAAe,IAAIjB,qBAAtB,EAA4C;AACxCiB,MAAAA,eAAe,GAAGA,eAAe,GAAGjB,qBAApC;AACAG,MAAAA,OAAO;AACV;;AAEDR,IAAAA,oBAAoB,CAACsB,eAAD,CAApB;AACAlB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAF,IAAAA,qBAAqB,CAACD,kBAAkB,GAAG,CAAtB,CAArB;AAEH;;AAKD,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAG;AACAJ,MAAAA,KAAK,EAALA,KADA;AAEAW,MAAAA,OAAO,EAAPA,OAFA;AAGAT,MAAAA,iBAAiB,EAAjBA,iBAHA;AAIAE,MAAAA,kBAAkB,EAAlBA,kBAJA;AAKAQ,MAAAA,iBAAiB,EAAjBA,iBALA;AAMAN,MAAAA,eAAe,EAAfA,eANA;AAOAiB,MAAAA,cAAc,EAAdA,cAPA;AAQAf,MAAAA,qBAAqB,EAArBA,qBARA;AASAgB,MAAAA,kBAAkB,EAAlBA;AATA,KADR;AAAA,cAcK3B;AAdL;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH;;GAlFeD,kB;;KAAAA,kB","sourcesContent":["import { createContext, ReactNode, useEffect, useState }from 'react';\r\nimport challenges from '../../challenges.json';\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'yey';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    levelUp: () => void;\r\n    currentExperience: number;\r\n    challengeCompleted: number;\r\n    startNewChallenge: () => void; \r\n    activeChallenge: Challenge;   \r\n    resetChallenge: () => void;  \r\n    experienceToNextLevel: number; \r\n    completedChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode\r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\n\r\nexport function ChallengesProvider( { children } : ChallengesProviderProps ){\r\n\r\n    // array vazio a function e executada apaenas uma vez quando componete for exibido em tela\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, []);\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengeCompleted, setChallengeCompleted] = useState(0);\r\n    \r\n\r\n    const [activeChallenge,setActiveChallenge] = useState(null);\r\n    \r\n    // calculo de level baseado no calculo de rpg\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n\r\n    function levelUp(){\r\n        setLevel(level + 1 );\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        console.log('new challeng');\r\n        const randomChallengeIndex = Math.floor(Math.random()* challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n        \r\n        setActiveChallenge(challenge);\r\n\r\n        if(Notification.permission === 'granted'){\r\n            new Notification('Novo desafio', {\r\n                body:`Valendo ${challenge.amount}xp!`\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completedChallenge(){\r\n        if(!activeChallenge){\r\n\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengeCompleted(challengeCompleted + 1);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <ChallengesContext.Provider \r\n        value={ {\r\n                level,\r\n                levelUp,\r\n                currentExperience,\r\n                challengeCompleted,\r\n                startNewChallenge,   \r\n                activeChallenge,   \r\n                resetChallenge,    \r\n                experienceToNextLevel, \r\n                completedChallenge,\r\n            } }\r\n        \r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}