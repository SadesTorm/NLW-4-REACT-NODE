{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projetos Rocketseat\\\\NLW-4-REACT-NODE\\\\Trilha-React\\\\health-ten-next\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { ChallengesContext } from \"./ChallengesContext\";\nexport const CowntodownContext = /*#__PURE__*/createContext({});\nexport function CountdownProvider({\n  children\n}) {\n  //pegando valores de outros componets\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.05 * 60);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFineshd\n  } = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60;\n  let countdownTimeout;\n\n  function handleChallengeSucceeded() {}\n\n  function handleChallengeFailed() {}\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(0.05 * 60);\n  }\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time == 0) {\n      console.log('finalizou');\n      setHasFineshd(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]);\n  return /*#__PURE__*/_jsxDEV(CowntodownContext.Provider, {\n    value: {\n      resetCountdown,\n      startCountdown,\n      useEffect,\n      minutes,\n      seconds,\n      hasFinished,\n      isActive\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/Projetos Rocketseat/NLW-4-REACT-NODE/Trilha-React/health-ten-next/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CowntodownContext","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFineshd","minutes","Math","floor","seconds","countdownTimeout","handleChallengeSucceeded","handleChallengeFailed","resetCountdown","clearTimeout","startCountdown","setTimeout","console","log"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAmBA,OAAO,MAAMC,iBAAiB,gBAAGL,aAAa,CAAC,EAAD,CAAvC;AAEP,OAAO,SAASM,iBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAAoE;AAEvE;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBP,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACK,IAAD;AAAA,OAAMC;AAAN,MAAiBP,QAAQ,CAAC,OAAO,EAAR,CAA/B;AACA,QAAM;AAAA,OAACQ,QAAD;AAAA,OAAUC;AAAV,MAAyBT,QAAQ,CAAC,KAAD,CAAvC;AACA,QAAM;AAAA,OAACU,WAAD;AAAA,OAAcC;AAAd,MAA+BX,QAAQ,CAAC,KAAD,CAA7C;AAEA,QAAMY,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;AAEA,MAAIU,gBAAJ;;AACA,WAASC,wBAAT,GAAmC,CAGlC;;AAGD,WAASC,qBAAT,GAAgC,CAG/B;;AAED,WAASC,cAAT,GAAyB;AAErBC,IAAAA,YAAY,CAACJ,gBAAD,CAAZ;AACAP,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,OAAO,EAAR,CAAP;AAEH;;AAED,WAASc,cAAT,GAAyB;AACrBZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AAEH;;AAEDV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGS,QAAQ,IAAIF,IAAI,GAAG,CAAtB,EAAwB;AAChBU,MAAAA,gBAAgB,GAAGM,UAAU,CAAC,MAAI;AAClCf,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,OAFgC,EAE9B,IAF8B,CAA7B;AAGP,KAJD,MAIM,IAAGE,QAAQ,IAAIF,IAAI,IAAI,CAAvB,EAAyB;AAC3BiB,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAb,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AACpB;AAEJ,GAZQ,EAYN,CAACG,QAAD,EAAUF,IAAV,CAZM,CAAT;AAcA,sBACI,QAAC,iBAAD,CAAmB,QAAnB;AACA,IAAA,KAAK,EAAE;AACHa,MAAAA,cADG;AAEHE,MAAAA,cAFG;AAGHtB,MAAAA,SAHG;AAIHa,MAAAA,OAJG;AAKHG,MAAAA,OALG;AAMHL,MAAAA,WANG;AAOHF,MAAAA;AAPG,KADP;AAAA,cAYKJ;AAZL;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { ChallengesContext } from \"./ChallengesContext\";\r\n\r\ninterface CowntodownContextData{\r\n\r\n    resetCountdown: () => void,\r\n    startCountdown: () => void,\r\n    useEffect,\r\n    minutes: number,\r\n    seconds: number,\r\n    hasFinished: boolean,\r\n    isActive: boolean\r\n\r\n}\r\n\r\n\r\ninterface CowntodownProviderProps{\r\n    children: ReactNode\r\n}\r\n\r\nexport const CowntodownContext = createContext({} as CowntodownContextData);\r\n\r\nexport function CountdownProvider( { children } : CowntodownProviderProps ){\r\n\r\n    //pegando valores de outros componets\r\n    const { startNewChallenge } = useContext(ChallengesContext);\r\n    \r\n    const [time,setTime] = useState(0.05 * 60);\r\n    const [isActive,setIsActive] = useState(false);\r\n    const [hasFinished, setHasFineshd] = useState(false);\r\n\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n\r\n    let countdownTimeout: NodeJS.Timeout;\r\n    function handleChallengeSucceeded(){\r\n        \r\n\r\n    }\r\n\r\n\r\n    function handleChallengeFailed(){\r\n\r\n\r\n    }\r\n\r\n    function resetCountdown(){\r\n\r\n        clearTimeout(countdownTimeout);\r\n        setIsActive(false);\r\n        setTime(0.05 * 60);\r\n\r\n    }\r\n\r\n    function startCountdown(){\r\n        setIsActive(true)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isActive && time > 0){\r\n                countdownTimeout = setTimeout(()=>{\r\n                setTime(time - 1);\r\n            }, 1000)\r\n        }else if(isActive && time == 0){\r\n            console.log('finalizou');\r\n            setHasFineshd(true);\r\n            setIsActive(false);\r\n            startNewChallenge();\r\n        }\r\n        \r\n    }, [isActive,time])\r\n\r\n    return(\r\n        <CowntodownContext.Provider \r\n        value={{\r\n            resetCountdown,\r\n            startCountdown,\r\n            useEffect,\r\n            minutes,\r\n            seconds,\r\n            hasFinished,\r\n            isActive,\r\n\r\n        }}\r\n        >\r\n            {children}\r\n        </CowntodownContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}