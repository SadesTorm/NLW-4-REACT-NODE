{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Projetos Rocketseat\\\\NLW-4-REACT-NODE\\\\Trilha-React\\\\health-ten-next\\\\src\\\\contexts\\\\ChallengesContext.tsx\";\nimport { createContext, useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport challenges from '../../challenges.json';\nexport const ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider({\n  children\n}) {\n  const {\n    0: level,\n    1: setLevel\n  } = useState(1);\n  const {\n    0: currentExperience,\n    1: setCurrentExperience\n  } = useState(0);\n  const {\n    0: challengeCompleted,\n    1: setChallengeCompleted\n  } = useState(0);\n  const {\n    0: activeChallenge,\n    1: setActiveChallenge\n  } = useState(null); // calculo de level baseado no calculo de rpg\n\n  const experienceToNextLevel = Math.pow((level + 1) * 4, 2); // array vazio a function e executada apaenas uma vez quando componete for exibido em tela\n\n  useEffect(() => {\n    Notification.requestPermission();\n  }, []);\n  useEffect(() => {\n    Cookies.set('level', String(level));\n    Cookies.set('currentExperience', String(currentExperience));\n    Cookies.set('challengeCompleted', String(challengeCompleted));\n  }, [level, currentExperience, challengeCompleted]);\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    console.log('new challeng');\n    const randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    const challenge = challenges[randomChallengeIndex];\n    new Audio('/notification.mp3').play();\n\n    if (Notification.permission === 'granted') {\n      new Notification('Novo desafio', {\n        body: `Valendo ${challenge.amount}xp!`\n      });\n    }\n\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  function completedChallenge() {\n    if (!activeChallenge) {\n      return;\n    }\n\n    const {\n      amount\n    } = activeChallenge;\n    let finalExperience = currentExperience + amount;\n\n    if (finalExperience >= experienceToNextLevel) {\n      finalExperience = finalExperience - experienceToNextLevel;\n      levelUp();\n    }\n\n    setCurrentExperience(finalExperience);\n    setActiveChallenge(null);\n    setChallengeCompleted(challengeCompleted + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level,\n      levelUp,\n      currentExperience,\n      challengeCompleted,\n      startNewChallenge,\n      activeChallenge,\n      resetChallenge,\n      experienceToNextLevel,\n      completedChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/Projetos Rocketseat/NLW-4-REACT-NODE/Trilha-React/health-ten-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useEffect","useState","Cookies","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengeCompleted","setChallengeCompleted","activeChallenge","setActiveChallenge","experienceToNextLevel","Math","pow","Notification","requestPermission","set","String","levelUp","startNewChallenge","console","log","randomChallengeIndex","floor","random","length","challenge","Audio","play","permission","body","amount","resetChallenge","completedChallenge","finalExperience"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useEffect, useState }from 'react';\r\nimport Cookies from 'js-cookie'\r\nimport challenges from '../../challenges.json';\r\n\r\n\r\ninterface Challenge{\r\n    type: 'body' | 'yey';\r\n    description: string;\r\n    amount: number;\r\n}\r\n\r\ninterface ChallengesContextData{\r\n    level: number;\r\n    levelUp: () => void;\r\n    currentExperience: number;\r\n    challengeCompleted: number;\r\n    startNewChallenge: () => void; \r\n    activeChallenge: Challenge;   \r\n    resetChallenge: () => void;  \r\n    experienceToNextLevel: number; \r\n    completedChallenge: () => void;\r\n}\r\n\r\ninterface ChallengesProviderProps{\r\n    children: ReactNode\r\n    level: number,\r\n    currentExperience: number,\r\n    challengeCompleted: number\r\n  \r\n}\r\n\r\nexport const ChallengesContext = createContext({} as ChallengesContextData);\r\n\r\n\r\nexport function ChallengesProvider( { children } : ChallengesProviderProps ){\r\n\r\n    const [level, setLevel] = useState(1);\r\n    const [currentExperience, setCurrentExperience] = useState(0);\r\n    const [challengeCompleted, setChallengeCompleted] = useState(0);\r\n    \r\n\r\n    const [activeChallenge,setActiveChallenge] = useState(null);\r\n    \r\n    // calculo de level baseado no calculo de rpg\r\n    const experienceToNextLevel = Math.pow((level + 1) * 4, 2);\r\n    \r\n    // array vazio a function e executada apaenas uma vez quando componete for exibido em tela\r\n    useEffect(() => {\r\n        Notification.requestPermission();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        Cookies.set('level', String(level));\r\n        Cookies.set('currentExperience', String(currentExperience) );\r\n        Cookies.set('challengeCompleted', String(challengeCompleted));\r\n\r\n    }, [level, currentExperience, challengeCompleted])\r\n\r\n    \r\n\r\n    function levelUp(){\r\n        setLevel(level + 1 );\r\n    }\r\n\r\n    function startNewChallenge(){\r\n        console.log('new challeng');\r\n        const randomChallengeIndex = Math.floor(Math.random()* challenges.length);\r\n        const challenge = challenges[randomChallengeIndex];\r\n\r\n        new Audio('/notification.mp3').play();\r\n        if(Notification.permission === 'granted'){\r\n            new Notification('Novo desafio', {\r\n                body: `Valendo ${challenge.amount}xp!`\r\n            })\r\n        }\r\n        \r\n        setActiveChallenge(challenge);\r\n\r\n      \r\n        \r\n    }\r\n\r\n    function resetChallenge(){\r\n        setActiveChallenge(null);\r\n    }\r\n\r\n    function completedChallenge(){\r\n        if(!activeChallenge){\r\n\r\n            return;\r\n        }\r\n\r\n        const { amount } = activeChallenge;\r\n\r\n        let finalExperience = currentExperience + amount;\r\n\r\n        if(finalExperience >= experienceToNextLevel){\r\n            finalExperience = finalExperience - experienceToNextLevel;\r\n            levelUp();\r\n        }\r\n\r\n        setCurrentExperience(finalExperience);\r\n        setActiveChallenge(null);\r\n        setChallengeCompleted(challengeCompleted + 1);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    return(\r\n        <ChallengesContext.Provider \r\n        value={ {\r\n                level,\r\n                levelUp,\r\n                currentExperience,\r\n                challengeCompleted,\r\n                startNewChallenge,   \r\n                activeChallenge,   \r\n                resetChallenge,    \r\n                experienceToNextLevel, \r\n                completedChallenge,\r\n            } }\r\n        \r\n        >\r\n            {children}\r\n        </ChallengesContext.Provider>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}